#!/usr/bin/env python

import argparse

from runToyMCFits import read_gen_config, get_combinations, read_gen_config
from run_ratio_histo_fit import run
from utils.miscHelpers import condMkDirFile

def run_fits(gen_dir, out_dir, chic1_limits=False, fix_ref=False, fix_range=False):
    """
    Run the script, with options from argparse
    """
    # get combinations, where gen is shifted and inside physically allowed ranges for chic{1,2}
    data_ref_combis = get_combinations(gen_dir, out_dir, True, [-0.3, 1], [-0.6, 1])

    for dataf, reff, outf in data_ref_combis:
        condMkDirFile(outf)
        # if we want to fix the reference lambda to the input, get it from the input_lambdas.json
        ref_lth = None
        if fix_ref:
            ref_lth = read_gen_config(reff)['lthsig']

        run(dataf, reff, outf, "genData", chic1_limits, ref_lth, fix_range)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Script for running systematically the ratio ToyMC tests')
    parser.add_argument('genDataDir', help='directory that holds the generated ToyMC data'
                        ' in the format as it is generated by \'generateToyMC.py\'')
    parser.add_argument('outdir', help='output base directory for the fit results')
    parser.add_argument('-l', '--chic1_limits', action='store_true', default=False, dest='limit',
                        help='Impose a limit on the chic1 polarization (i.e. reference)')
    parser.add_argument('-f', '--fix_ref', action='store_true', default=False, dest='fix_ref',
                        help='fix ref_lth to input lth_ref')
    parser.add_argument('-r', '--fix_range', action='store_true', default=False, dest='fit_range',
                        help='fix the range to the bins that are filled in the histogram.')

    args = parser.parse_args()


    import ROOT as r
    r.gROOT.SetBatch()

    run_fits(args.genDataDir, args.outdir,
             args.limit, args.fix_ref, args.fit_range)
